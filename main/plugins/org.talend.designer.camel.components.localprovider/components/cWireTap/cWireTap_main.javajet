<%@ jet skeleton="../common/cLanguage.skeleton"
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String URI = ElementParameterParser.getValue(node, "__URI__");
	boolean new_exchange  = "true".equals(ElementParameterParser.getValue(node, "__NEW_EXCHANGE__"));
	boolean copy_original_message  = "true".equals(ElementParameterParser.getValue(node, "__COPY_ORIGINAL_MESSAGE__"));
	String expression  = ElementParameterParser.getValue(node, "__EXPRESSION__");
	String processor  = ElementParameterParser.getValue(node, "__PROCESSOR__");
	String code = ElementParameterParser.getValue(node, "__CODE__");
	String language  = ElementParameterParser.getValue(node, "__LANGUAGES__");
	String expressiontxt  = ElementParameterParser.getValue(node, "__EXPRESSIONTXT__");
	String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");

%>
	.wireTap(<%=URI%>)
<%

	if(copy_original_message){
%>
		.copy(true)
<%
	}else{
%>
		.copy(false)
<%	
	}

	if(new_exchange){
		if("true".equals(expression)){
			if ("el".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.ELExpression(<%=expressiontxt%>))
<%
			} else if ("groovy".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.GroovyExpression(<%=expressiontxt%>))
<%
			} else if ("javascript".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.JavaScriptExpression(<%=expressiontxt%>))
<%
			} else if ("sql".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.SqlExpression(<%=expressiontxt%>))
<%
			} else if ("jsonpath".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.JsonPathExpression(<%=expressiontxt%>))
<%
			} else if ("jxpath".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.JXPathExpression(<%=expressiontxt%>))
<%
			} else if ("mvel".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.MvelExpression(<%=expressiontxt%>))
<%
			} else if ("ognl".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.OgnlExpression(<%=expressiontxt%>))
<%
			} else if ("php".equals(language)) {
%>			
			.newExchangeBody(new org.apache.camel.model.language.PhpExpression(<%=expressiontxt%>))
<%
			} else if ("python".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.PythonExpression(<%=expressiontxt%>))
<%
			} else if ("ruby".equals(language)) {
%>			
			.newExchangeBody(new org.apache.camel.model.language.RubyExpression(<%=expressiontxt%>))
<%
			} else if ("spel".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.SpELExpression(<%=expressiontxt%>))
<%
			} else if ("xpath".equals(language)) {
%>
			.newExchangeBody(<%=cid%>ns.xpath(<%=expressiontxt%>))
<%
			} else if ("xquery".equals(language)) {
%>
			.newExchangeBody(new org.apache.camel.model.language.XQueryExpression(<%=expressiontxt%>))
<%
			} else {
				String exp = getExpression(language, expressiontxt, cid, useNamespaces, ""); 
%>
			.newExchangeBody(<%=exp%>)
<%
			}
		}else if("true".equals(processor)){
%>
			.newExchange(new org.apache.camel.Processor() {
					
					public void process(org.apache.camel.Exchange exchange) throws Exception {
						// TODO Auto-generated method stub
						<%=code%>
					}
				})
				
<%		
		}
}
%>
